[{"/Users/lakshmiganesh/Documents/Capgemini/React/employeepayroll/src/index.js":"1","/Users/lakshmiganesh/Documents/Capgemini/React/employeepayroll/src/reportWebVitals.js":"2","/Users/lakshmiganesh/Documents/Capgemini/React/employeepayroll/src/App.js":"3","/Users/lakshmiganesh/Documents/Capgemini/React/employeepayroll/src/componenet/payroll-form/payroll-form.jsx":"4","/Users/lakshmiganesh/Documents/Capgemini/React/employeepayroll/src/services/employee-service.js":"5","/Users/lakshmiganesh/Documents/Capgemini/React/employeepayroll/src/config/config.js":"6"},{"size":500,"mtime":1608342475930,"results":"7","hashOfConfig":"8"},{"size":362,"mtime":1608342475930,"results":"9","hashOfConfig":"8"},{"size":450,"mtime":1608349029322,"results":"10","hashOfConfig":"8"},{"size":11388,"mtime":1608349661803,"results":"11","hashOfConfig":"8"},{"size":231,"mtime":1608350658561,"results":"12","hashOfConfig":"8"},{"size":62,"mtime":1608349029325,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"1d6n8td",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"16"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"/Users/lakshmiganesh/Documents/Capgemini/React/employeepayroll/src/index.js",[],["29","30"],"/Users/lakshmiganesh/Documents/Capgemini/React/employeepayroll/src/reportWebVitals.js",[],"/Users/lakshmiganesh/Documents/Capgemini/React/employeepayroll/src/App.js",[],"/Users/lakshmiganesh/Documents/Capgemini/React/employeepayroll/src/componenet/payroll-form/payroll-form.jsx",["31","32","33"],"import React, { useState, useEffect } from 'react'\nimport logo from '../../assets/images/logo.png'\nimport profile1 from '../../assets/profile-images/Ellipse -3.png'\nimport profile2 from '../../assets/profile-images/Ellipse -1.png'\nimport profile3 from '../../assets/profile-images/Ellipse -8.png'\nimport profile4 from '../../assets/profile-images/Ellipse -7.png'\nimport EmployeeService from \"../../services/employee-service\";\nimport { useParams, Link, withRouter } from 'react-router-dom';\n\nimport './payroll-form.scss'\n\nconst PayrollForm = (props) => {\n  let initialValue = {\n    name: '',\n    profileArray: [\n      { url: '../../assets/profile-images/Ellipse -3.png' },\n      { url: '../../assets/profile-images/Ellipse 1.png' },\n      { url: '../../assets/profile-images/Ellipse -8.png' },\n      { url: '../../assets/profile-images/Ellipse -7.png' }\n\n    ],\n    allDepartment: [\n      'HR', 'Sales', 'Finance', 'Engineer', 'Others'\n    ],\n    departMentValue: [],\n    gender: '',\n    salary: '',\n    day: '1',\n    month: 'Jan',\n    year: '2020',\n    startDate: '',\n    notes: '',\n    id: '',\n    profileUrl: '',\n    isUpdate: false,\n    error: {\n      department: '',\n      name: '',\n      gender: '',\n      salary: '5000',\n      profileUrl: '',\n      startDate: ''\n    }\n  }\n  const [formValue, setForm] = useState(initialValue);\n  const employeeService = new EmployeeService();\n\n  const changeValue = (event) => {\n    setForm({ ...formValue, [event.target.name]: event.target.value })\n    console.log(event.target.value)\n  }\n\n  const onCheckChange = (name) => {\n    let index = formValue.departMentValue.indexOf(name);\n\n    let checkArray = [...formValue.departMentValue]\n    if (index > -1)\n      checkArray.splice(index, 1)\n    else\n      checkArray.push(name);\n    setForm({ ...formValue, departMentValue: checkArray });\n  }\n  const getChecked = (name) => {\n    return formValue.departMentValue && formValue.departMentValue.includes(name);\n  }\n\n  const validData = async () => {\n    let isError = false;\n    let error = {\n      department: '',\n      name: '',\n      gender: '',\n      salary: '',\n      profileUrl: '',\n      startDate: ''\n    }\n    if (formValue.name.length < 1) {\n      error.name = 'name is required field'\n      isError = true;\n    }\n    if (formValue.gender.length < 1) {\n      error.gender = 'gender is required field'\n      isError = true;\n    }\n    if (formValue.salary.length < 1) {\n      error.salary = 'salary is required field'\n      isError = true;\n    }\n    if (formValue.profileUrl.length < 1) {\n      error.profileUrl = 'profile is required field'\n      isError = true;\n    }\n\n    if (formValue.departMentValue.length < 1) {\n      error.department = 'department is required field'\n      isError = true;\n    }\n    await setForm({ ...formValue, error: error })\n    return isError;\n\n\n  }\n  const save = async (event) => {\n    event.preventDefault();\n    let object = {\n      name: formValue.name,\n      departMent: formValue.departMentValue,\n      gender: formValue.gender,\n      salary: formValue.salary,\n      startDate: `${formValue.day} ${formValue.month} ${formValue.year}`,\n      notes: formValue.notes,\n      id: formValue.id,\n      profileUrl: formValue.profileUrl,\n    };\n    employeeService.addEmployee(object)\n      .then((data) => {\n        console.log(\"data added\");\n        props.history.push(\"\");\n      })\n      .catch((err) => {\n        console.log(\"err while Add\");\n      });\n  };\n\n  const reset = () => {\n    setForm({ ...initialValue, id: formValue.id, isUpdate: formValue.isUpdate });\n\n    console.log(formValue);\n  }\n  return (\n    <div className=\"payroll-main\">\n      <header className='header row center'>\n        <div className=\"logo\">\n          <img src={logo} alt=\"\" />\n          <div>\n            <span className=\"emp-text\">EMPLOYEE</span> <br />\n            <span className=\"emp-text emp-payroll\">PAYROLL</span>\n          </div>\n        </div>\n      </header>\n      <div className=\"content\">\n        <form className=\"form\" action=\"#\" onSubmit={save}>\n          <div className=\"form-head\">Employee Payroll form</div>\n          <div className=\"row\">\n            <label className=\"label text\" htmlFor=\"name\">Name</label>\n            <input className=\"input\" type=\"text\" id=\"name\" name=\"name\" value={formValue.name} onChange={changeValue} placeholder=\"Your name..\" />\n          </div>\n          <div className=\"error\" > {formValue.error.name} </div>\n          <div className=\"row\">\n            <label className=\"label text\" htmlFor=\"profileUrl\">Profile image</label>\n            <div className=\"profile-radio-button\">\n              <label >\n                <input type=\"radio\" checked={formValue.profileUrl === '../../assets/profile-images/Ellipse -3.png'} name=\"profileUrl\" value=\"../../assets/profile-images/Ellipse -3.png\" onChange={changeValue} />\n                <img className=\"profile\" src={profile1} alt=\"profile\" />\n              </label>\n              <label >\n                <input type=\"radio\" name=\"profileUrl\" checked={formValue.profileUrl === '../../assets/profile-images/Ellipse 1.png'} value=\"../../assets/profile-images/Ellipse 1.png\" onChange={changeValue} />\n                <img className=\"profile\" src={profile2} alt=\"profile\" />\n              </label>\n              <label >\n                <input type=\"radio\" name=\"profileUrl\" checked={formValue.profileUrl === '../../assets/profile-images/Ellipse -8.png'} value=\"../../assets/profile-images/Ellipse -8.png\" onChange={changeValue} />\n                <img className=\"profile\" src={profile3} alt=\"profile\" />\n              </label>\n              <label >\n                <input type=\"radio\" name=\"profileUrl\" checked={formValue.profileUrl === '../../assets/profile-images/Ellipse -7.png'} value=\"../../assets/profile-images/Ellipse -7.png\" onChange={changeValue} />\n                <img className=\"profile\" src={profile4} alt=\"profile\" />\n              </label>\n\n            </div>\n          </div>\n          <div className=\"error\" > {formValue.error.profileUrl} </div>\n          <div className=\"row\">\n            <label className=\"label text\" htmlFor=\"gender\">Gender</label>\n            <div>\n              <input type=\"radio\" id=\"male\" checked={formValue.gender === 'male'} onChange={changeValue} name=\"gender\" value=\"male\" />\n              <label className=\"text\" htmlFor=\"male\">Male</label>\n              <input type=\"radio\" id=\"female\" checked={formValue.gender === 'female'} onChange={changeValue} name=\"gender\" value=\"female\" />\n              <label className=\"text\" htmlFor=\"female\">Female</label>\n            </div>\n          </div>\n          <div className=\"error\" > {formValue.error.gender} </div>\n\n          <div className=\"row\">\n            <label className=\"label text\" htmlFor=\"department\">Department</label>\n            <div>\n              {formValue.allDepartment.map(item => (\n                <span key={item}>\n                  <input className=\"checkbox\" type=\"checkbox\" onChange={() => onCheckChange(item)} name={item}\n                    checked={getChecked(item)} value={item} />\n                  <label className=\"text\" htmlFor={item}>{item}</label>\n                </span>\n              ))}\n\n            </div>\n          </div>\n          <div className=\"error\" > {formValue.error.department} </div>\n\n          <div className=\"row\">\n            <label className=\"label text\" htmlFor=\"salary\">Salary</label>\n            <input className=\"input\" type=\"range\" onChange={changeValue} id=\"salary\" value={formValue.salary} name=\"salary\" placeholder=\"Salary\"\n              min=\"1000\" max=\"10000\" step=\"100\" />\n            <div className=\"error\" > {formValue.error.salary} </div>\n          </div>\n\n          <div className=\"row\">\n            <label className=\"label text\" htmlFor=\"startDate\">Start Date</label>\n            <div>\n              <select value={formValue.day} onChange={changeValue} id=\"day\" name=\"day\">\n                <option value=\"1\">1</option>\n                <option value=\"2\">2</option>\n                <option value=\"3\">3</option>\n                <option value=\"4\">4</option>\n                <option value=\"5\">5</option>\n                <option value=\"6\">6</option>\n                <option value=\"7\">7</option>\n                <option value=\"8\">8</option>\n                <option value=\"9\">9</option>\n                <option value=\"10\">10</option>\n                <option value=\"11\">11</option>\n                <option value=\"12\">12</option>\n                <option value=\"13\">13</option>\n                <option value=\"14\">14</option>\n                <option value=\"15\">15</option>\n                <option value=\"16\">16</option>\n                <option value=\"17\">17</option>\n                <option value=\"18\">18</option>\n                <option value=\"19\">19</option>\n                <option value=\"20\">20</option>\n                <option value=\"21\">21</option>\n                <option value=\"22\">22</option>\n                <option value=\"23\">23</option>\n                <option value=\"24\">24</option>\n                <option value=\"25\">25</option>\n                <option value=\"26\">26</option>\n                <option value=\"27\">27</option>\n                <option value=\"28\">28</option>\n                <option value=\"29\">29</option>\n                <option value=\"30\">30</option>\n                <option value=\"31\">31</option>\n              </select>\n              <select value={formValue.month} onChange={changeValue} id=\"month\" name=\"month\">\n                <option value=\"Jan\">January</option>\n                <option value=\"Feb\">Febuary</option>\n                <option value=\"March\">March</option>\n                <option value=\"April\">April</option>\n                <option value=\"May\">May</option>\n                <option value=\"June\">June</option>\n                <option value=\"July\">July</option>\n                <option value=\"Aug\">August</option>\n                <option value=\"Sept\">September</option>\n                <option value=\"Oct\">October</option>\n                <option value=\"Nov\">November</option>\n                <option value=\"Dec\">December</option>\n              </select>\n              <select value={formValue.year} onChange={changeValue} id=\"year\" name=\"year\">\n                <option value=\"2020\">2020</option>\n                <option value=\"2019\">2019</option>\n                <option value=\"2018\">2018</option>\n                <option value=\"2017\">2017</option>\n                <option value=\"2016\">2016</option>\n              </select>\n            </div>\n          </div>\n          <div className=\"error\" > {formValue.error.startDate} </div>\n\n          <div className=\"row\">\n            <label className=\"label text\" htmlFor=\"notes\">Notes</label>\n            <textarea onChange={changeValue} id=\"notes\" value={formValue.notes} className=\"input\" name=\"notes\" placeholder=\"\"\n              style={{ height: '100%' }}></textarea>\n          </div>\n\n          <div className=\"buttonParent\">\n            <Link to=\"\" className=\"resetButton button cancelButton\">Cancel</Link>\n\n            <div className=\"submit-reset\">\n              <button type=\"submit\" className=\"button submitButton\" id=\"submitButton\">{formValue.isUpdate ? 'Update' : 'Submit'}</button>\n              <button type=\"button\" onClick={reset} className=\"resetButton button\">Reset</button>\n            </div>\n          </div >\n        </form >\n      </div >\n    </div >\n  )\n}\nexport default withRouter(PayrollForm);\n","/Users/lakshmiganesh/Documents/Capgemini/React/employeepayroll/src/services/employee-service.js",[],"/Users/lakshmiganesh/Documents/Capgemini/React/employeepayroll/src/config/config.js",[],["34","35"],{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","severity":1,"message":"41","line":1,"column":27,"nodeType":"42","messageId":"43","endLine":1,"endColumn":36},{"ruleId":"40","severity":1,"message":"44","line":8,"column":10,"nodeType":"42","messageId":"43","endLine":8,"endColumn":19},{"ruleId":"40","severity":1,"message":"45","line":67,"column":9,"nodeType":"42","messageId":"43","endLine":67,"endColumn":18},{"ruleId":"36","replacedBy":"46"},{"ruleId":"38","replacedBy":"47"},"no-native-reassign",["48"],"no-negated-in-lhs",["49"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'useParams' is defined but never used.","'validData' is assigned a value but never used.",["48"],["49"],"no-global-assign","no-unsafe-negation"]